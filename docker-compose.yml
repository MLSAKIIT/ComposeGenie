version: '3.8'

services:
  # Frontend - React Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:3001
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - backend

  # Backend - Node.js API Server
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=development
      - MONGODB_URI=mongodb://mongodb:27017/compose_generator
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=your_jwt_secret_here
    volumes:
      - ./backend:/app
      - /app/node_modules
    depends_on:
      - mongodb
      - redis
      - security-scanner
      - template-generator
      - config-validator

  # Security Scanner Service
  security-scanner:
    build:
      context: ./services/security-scanner
      dockerfile: Dockerfile
    ports:
      - "8001:8001"
    environment:
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/security_db
      - REDIS_URL=redis://redis:6379
    volumes:
      - ./services/security-scanner:/app
    depends_on:
      - postgres
      - redis

  # Template Generator Service
  template-generator:
    build:
      context: ./services/template-generator
      dockerfile: Dockerfile
    ports:
      - "8002:8002"
    environment:
      - MONGODB_URI=mongodb://mongodb:27017/templates
      - REDIS_URL=redis://redis:6379
    volumes:
      - ./services/template-generator:/app
      - /app/node_modules
    depends_on:
      - mongodb
      - redis

  # Config Validator Service
  config-validator:
    build:
      context: ./services/config-validator
      dockerfile: Dockerfile
    ports:
      - "8003:8003"
    environment:
      - REDIS_URL=redis://redis:6379
      - LOG_LEVEL=info
    volumes:
      - ./services/config-validator:/app
    depends_on:
      - redis

  # MongoDB Database
  mongodb:
    image: mongo:6
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=password
    volumes:
      - mongodb_data:/data/db
      - ./scripts/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js

  # PostgreSQL Database (for security scanner)
  postgres:
    image: postgres:15
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=security_db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
    volumes:
      - postgres_data:/var/lib/postgresql/data

  # Redis Cache and Message Queue
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - frontend
      - backend

volumes:
  mongodb_data:
  postgres_data:
  redis_data:

networks:
  default:
    name: compose_generator_network